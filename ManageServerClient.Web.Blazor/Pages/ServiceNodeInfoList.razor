
@inject ILogger<Index> _logger
@inject IServerApi _serverApi
@inject AutoMapService autoMap
@inject IJSRuntime jsRuntime

<h1>
    所有服务节点
    <ModalDialogButton classBtn="btn btn-primary" DialogId="pModalDialogAddId" ButtonContent="新增" OnClickCallback="onAdd">
        <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
    </ModalDialogButton>
</h1>

<p>监控客户端登陆后获取所有的被监控的服务器节点</p>
<PNotifier @ref="pNotifier" />

@if (serviceNodeInfos == null)
{
    <p><em>加载中，请稍后...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                @*<th>服务标识</th>*@
                <th>服务id</th>
                <th>服务类型</th>
                <th>服务ip</th>
                <th>端口</th>
                <th>描述</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in serviceNodeInfos)
            {
                <ServiceNodeInfoTR @key="item.identity" curr="item" dialogId="pModalDialogEditId" pNotifier="pNotifier" pModalDialog="pModalDialogEdit" parentTop="this" />

            }
        </tbody>
    </table>
}
<ServiceNodeInfoDialog @ref="pModalDialogAdd" curr="currAdd" DialogId="pModalDialogAddId" OnClickCallback="DialogAddBtn" />
<ServiceNodeInfoDialog @ref="pModalDialogEdit" curr="currItem" DialogId="pModalDialogEditId" OnClickCallback="DialogEditBtn" />

@code {
    [Parameter]
    public PNotifier pNotifier { get; set; }
    [Parameter]
    public toDoEnum currTodo { get; set; } = toDoEnum.none;
    [Parameter]
    public ServiceNodeInfo currItem { get; set; } = new ServiceNodeInfo();
    [Parameter]
    public ServiceNodeInfo currAdd { get; set; } = new ServiceNodeInfo();
    [Parameter]
    public ServiceNodeInfoDialog pModalDialogEdit { get; set; }
    [Parameter]
    public ServiceNodeInfoDialog pModalDialogAdd { get; set; }

    [Parameter]
    public List<ServiceNodeInfo> serviceNodeInfos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    public async Task LoadData()
    {
        var getResult = await _serverApi.TE_ALL_SVR_QRY(new RequestBase() { reqid = ServerEnum.TE_ALL_SVR_QRY });
        serviceNodeInfos = getResult.databody;
    }
    public async Task<ResponseBase> Add(ServiceNodeInfo curr)
    {
        var getResult = await _serverApi.TE_SVR_ADD(new RequestObject<ServiceNodeInfo>() { reqid = ServerEnum.TE_SVR_ADD, databody = curr });

        return getResult;
    }
    public void Remove(ServiceNodeInfo curr)
    {
        serviceNodeInfos.Remove(curr);
        StateHasChanged();
    }
    public void Change(ServiceNodeInfo curr, toDoEnum toDoEnum)
    {
        var findcurr = serviceNodeInfos.Where(a => a.identity == curr.identity).FirstOrDefault(); 
        currItem = findcurr;
        this.currTodo = toDoEnum; 
        StateHasChanged();
    }
    public void onAdd(MouseEventArgs e)
    {
        pModalDialogAdd.pModalDialog.ChangeDilog("新增", "新增");
    }

    private async Task DialogAddBtn(MouseEventArgs e)
    {
        var newCurr = autoMap.GetDest<ServiceNodeInfo, ServiceNodeInfo>(currAdd);
        newCurr.identity = Guid.NewGuid().ToString();
        var result = await Add(currAdd);
        if (result.errcode == 0)
        {
            await LoadData();
            StateHasChanged();
        }
        if (result.errcode == 0)
        {
            await pNotifier.OnNotify($"新增 ：{newCurr.toJsonStr()} 成功", 1, alertEnum.warning);
            jsRuntime.modalJs("pModalDialogAddId", "hide");
        }
        else
        {
            await pNotifier.OnNotify($"新增 ：{newCurr.toJsonStr()} 失败", 1, alertEnum.warning);
        }
    }
    private async Task DialogEditBtn(MouseEventArgs e)
    {
        switch (currTodo)
        {
            case toDoEnum.none:
                break;
            case toDoEnum.add:
                break;
            case toDoEnum.edit:
                break;
            case toDoEnum.del:
                break;
            case toDoEnum.live:
                break;
            default:
                break;
        }
        await pNotifier.OnNotify($"{currTodo.GetDescription()} ：{currItem.toJsonStr()} 成功", 1, alertEnum.success);
        jsRuntime.modalJs("pModalDialogEditId", "hide");
    }
}
