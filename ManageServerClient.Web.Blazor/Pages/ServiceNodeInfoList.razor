@page "/serviceNodeInfoList"

@inject ILogger<Index> _logger
@inject IServerApi _serverApi
@inject AutoMapService autoMap

<h1>
    所有服务节点
    <ModalDialogButton classBtn="btn btn-primary" DialogId="pModalDialogAddId" ButtonContent="新增" OnClickCallback="onAdd">
        <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
    </ModalDialogButton>
</h1>

<p>监控客户端登陆后获取所有的被监控的服务器节点</p>
<PNotifier @ref="pNotifier" />

@if (serviceNodeInfos == null)
{
    <p><em>加载中，请稍后...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                @*<th>服务标识</th>*@
                <th>服务id</th>
                <th>服务类型</th>
                <th>服务ip</th>
                <th>端口</th>
                <th>描述</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in serviceNodeInfos)
            {
                <ServiceNodeInfoTR @key="curr.identity" curr="item" pNotifier="pNotifier" pModalDialog="pModalDialog" parentTop="this" />

            }
        </tbody>
    </table>
}
<ServiceNodeInfoDialog @ref="pModalDialog" curr="curr" />
<ServiceNodeInfoDialog @ref="pModalDialogAdd" curr="currAdd" DialogId="pModalDialogAddId" />

@code {
    [Parameter]
    public PNotifier pNotifier { get; set; }
    [Parameter]
    public ServiceNodeInfo curr { get; set; } = new ServiceNodeInfo();
    [Parameter]
    public ServiceNodeInfo currAdd { get; set; } = new ServiceNodeInfo();
    [Parameter]
    public ServiceNodeInfoDialog pModalDialog { get; set; }
    [Parameter]
    public ServiceNodeInfoDialog pModalDialogAdd { get; set; }

    [Parameter]
    public List<ServiceNodeInfo> serviceNodeInfos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var getResult = await _serverApi.TE_ALL_SVR_QRY(new RequestBase() { reqid = ServerEnum.TE_ALL_SVR_QRY });
        serviceNodeInfos = getResult.databody;
    }
    public void Add(ServiceNodeInfo curr)
    {
        serviceNodeInfos.Add(curr);
        currAdd = new ServiceNodeInfo();
        StateHasChanged();
    }
    public void Remove(ServiceNodeInfo curr)
    {
        serviceNodeInfos.Remove(curr);
        StateHasChanged();
    }
    public void Change(ServiceNodeInfo curr)
    {
        var findcurr = serviceNodeInfos.Where(a => a.identity == curr.identity).FirstOrDefault();
        if (findcurr != null)
        {
            findcurr = curr;
        }
        StateHasChanged();
    }
    public void onAdd(MouseEventArgs e)
    {
        pModalDialogAdd.pModalDialog.ChangeDilog("新增", "新增");
        Func<MouseEventArgs, Task> func = (e) =>
        {
            var newCurr = autoMap.GetDest<ServiceNodeInfo, ServiceNodeInfo>(currAdd);
            newCurr.identity = Guid.NewGuid().ToString();
            Add(newCurr);
            return pNotifier.OnNotify($"新增：{newCurr.toJsonStr()} 成功", 0, alertEnum.warning);
        };
        pModalDialogAdd.pModalDialog.SetClickCallbackToDo(func);
    }
}
